{
  "access-token": {
    "title": "Access Token",
    "definition": "An Access Token is a credential that can be used by an application to access an API. Access Tokens can be either an opaque string or a JSON web token. They inform the API that the bearer of the token has been authorized to access the API and perform specific actions specified by the scope that has been granted. Access Tokens should be used as a Bearer credential and transmitted in an HTTP Authorization header to the API.",
    "short": "An authorization credential, in the form of an opaque string or JTW, used to access an API."
  },
  "audience": {
    "title": "Audience",
    "definition": "The Audience (or `aud` claim in a token) is the unique identifier of either the application (its `ClientID`) for an ID Token or the API Identifier of the API that is being called (in an Access Token). At Auth0, the value of the Audience sent in a request for an Access Token will dictate whether that token is returned in an opaque or JWT format.",
    "short": "A unique identifier, <b>aud</b> in a token, for a client (ID Token) or an API (Access Token)."
  },
  "callback": {
    "title": "Callback",
    "definition": "A callback is a URL to which Auth0 will send its response after an API call (such as when a user authenticates). It is often the same URL to which a user is redirected after authentication.",
    "short": "The URL to which Auth0 sends its response after an API call and sometimes where a user is redirected after authentication."
  },
  "json-web-token": {
    "title": "JSON Web Token (JWT)",
    "definition": "A JWT is an open, industry standard <a href='https://tools.ietf.org/html/rfc7519'>RFC 7519</a> method for representing claims securely between two parties. At Auth0, ID Tokens are always returned in JWT format, and Access Tokens are often in JWT format. You may decode well-formed JWTs at <a href='https://jwt.io'>JWT.io</a> to view their claims.",
    "short": "The standard ID Token format and often Access Token format used to represent claims securely between two parties."
  },
  "lock": {
    "title": "Lock",
    "definition": "Lock is a UI widget for authenticating users. It is ready to go as-is and is the default face of the Classic Universal Login experience. It allows for the customization of minor behavioral and appearance options, but its primary goal is ease of use over customization.",
    "short": "A UI widget for authenticating users."
  },
  "multifactor-authentication": {
    "title": "multifactor authentication",
    "definition": "MFA is an authentication process that takes into account multiple factors. Typically at Auth0, the first factor is the standard username/password exchange, and the second is a code or link via email or SMS, a one-time-password via an app such as Authy or Google Authenticator, or a push notification via a phone app such as Guardian or Duo. The provision of another factor allows your account to remain secure if someone captures one or the other factor - acquires your password or steals your phone, for example.",
    "short": "A user authentication process that uses a  factor in addition to username and password such as a code via SMS."
  },
  "nonce": {
    "title": "Nonce",
    "definition": "A nonce is an arbitrary number (often a random or pseudo-random number) issued in an authentication protocol to ensure that old communications cannot be reused in replay attacks. In other words, the nonce is only issued once, so if an attacker attempting to replay a transaction has a different nonce, it allows that false transaction to be detected more easily.",
    "short": "An arbitrary number issued once in an authentication protocol to detect and prevent replay attacks."
  },
  "openid": {
    "title": "OpenID",
    "definition": "OpenID is an open standard for authentication. It allows applications to verify that users are who they say they are without needing to collect, store, and therefore become liable for a user’s login information. At its most simple, it works like this:",
    "subitems": {
      "1": "Application sends an authorization request to an OpenID server (e.g. Auth0) an authentication request",
      "2": "The authorization server verifies the identity of the user, sending proof to user if successful",
      "3": "User sends proof of authentication to the application",
      "4": "Application approves or denies access",
    "short": "An open standard for authentication that allows applications to verify users' identity without collecting and storing login information." 
    }
  },
  "passwordless": {
    "title": "Passwordless",
    "definition": "Passwordless is a form of authentication where the first factor is not a password. It can be one-time passwords received by email or SMS, push notifications or biometric sensors. Given it's harder to attack, it's more secure than traditional username/password logins.",
    "short": "A form of authentication that does not rely on password as a first factor."
  },
  "refresh-token": {
    "title": "Refresh Token",
    "definition": "A Refresh Token is a special kind of token that can be used to obtain a renewed Access Token (a token that allows access to a protected resource) at any time. You can request new Access Tokens using the Refresh Token until the Refresh Token is blacklisted. This is useful for renewing expiring Access Tokens without forcing the user to log in again.",
    "short": "A token used to obtain a renewed Access Token without forcing users to log in again."
  },
  "role": {
    "title": "Role",
    "definition": "A Role is an aspect of a user’s identity assigned to the user to give them a certain set of permissions.",
    "short": "An aspect of a user’s identity assigned to the user to give them a certain set of permissions."
  },
  "security-assertion-markup-language": {
    "title": "Security Assertion Markup Language (SAML)",
    "definition": "SAML is a standardized protocol by which two parties can exchange authentication information without the use of a password.",
    "short": "A standardized protocol allowing two parties to exchange authentication information without a password."
  },
  "scope": {
    "title": "Scope",
    "definition": "Scopes define the specific actions applications can be allowed to do or information that they can request on a user’s behalf. Often, applications will want to make use of the information that has already been created in an online resource. To do so, the application must ask for authorization to access this information on a user’s behalf. When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs, and the authorization server uses the Scope parameter to respond with the access that was actually granted.",
    "short": "Determines actions applications can perform on a user’s behalf with information previously created in an online resource."
  },
  "single-sign-on": {
    "title": "Single Sign On (SSO)",
    "definition": "SSO occurs when a user logs in to one application and is then logged in to other applications automatically, regardless of the platform, technology, or domain the user is using. The user signs in only one time (hence the name of the feature). Similarly, Single Logout  (SLO) occurs when you terminate the session of each application or service where a user is logged in. SSO and SLO are possible through the use of  sessions.",
    "short": "Occurs when a user logs in to one application and is then logged in to another application automatically."
  },
 "universal-login": {
   "title": "Universal Login",
   "definition": "Universal Login is Auth0’s implementation of the authentication flow, which is the key feature of an Authorization Server. Each time a user needs to prove their identity, your applications redirect to Universal Login and Auth0 will do what’s needed to guarantee the user’s identity. ",
   "short": "Your application redirects to Universal Login, hosted on Auth0's Authorization Server, to verify a user's identity."
 } 
}