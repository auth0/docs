{
  "access-token": {
    "title": "Access Token",
    "definition": "A credential that can be used by an application to access an API. It informs the API that the bearer of the token has been authorized to access the API and perform specific actions specified by the scope that has been granted. An Access Token can be in any format, but two popular options include opaque strings and JSON Web Tokens (JWT). They should be transmitted to the API as a Bearer credential in an HTTP Authorization header.",
    "short": "An authorization credential, in the form of an opaque string or JWT, used to access an API."
  },
  "account linking": {
    "title": "Account Linking",
    "definition": "Connecting user accounts across multiple platforms to allow users access to more than one resource or application by providing credentials one time.",
    "short": "Connecting user accounts across multiple platforms."
  },
  "actions": {
    "title": "Actions",
    "definition": "Secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime. Actions are used to customize and extend Auth0's capabilities with custom logic.",
    "short": "Secure, tenant-specific, versioned functions written in Node.js that execute at certain points during the Auth0 runtime."
  },
  "adaptive-multifactor-authentication": {
    "title": "Adaptive Multi-factor Authentication",
    "definition": "Multi-factor authentication (MFA) that is only triggered for users when an attempted login is determined to be a low confidence login. With Adaptive MFA, Auth0 triggers MFA only when needed to add friction for bad actors while keeping the login experience unchanged for good actors.",
    "short": "Multi-factor authentication (MFA) that is only triggered for users when an attempted login is determined to be a low confidence login. With Adaptive MFA, Auth0 triggers MFA only when needed to add friction for bad actors while keeping the login experience unchanged for good actors."
  },
  "application": {
    "title": "Application",
    "definition": "Your software that relies on Auth0 for authentication and identity management. Auth0 supports single-page, regular web, native, and machine-to-machine applications.",
    "short": "A unique identifier, <b>aud</b> in a token, for an application (ID Token) or an API (Access Token)."
  },
  "attack-protection": {
    "title": "Attack Protection",
    "definition": "Features that Auth0 provides to detect and mitigate attacks, including brute-force protection, suspicious IP throttling, breached password detection, bot detection, and adaptive multi-factor authentication.",
    "short": "Features that Auth0 provides to detect and mitigate attacks, including brute-force protection, suspicious IP throttling, breached password detection, bot detection, and adaptive multi-factor authentication."
  },
  "audience": {
    "title": "Audience",
    "definition": "The unique identifier of the audience for an issued token, identified within a JSON Web Token as the `aud` claim. The audience value is either the application (`Client ID`) for an ID Token or the API that is being called (`API Identifier`) for an Access Token. At Auth0, the Audience value sent in a request for an Access Token dictates whether that token is returned in an opaque or JWT format.",
    "short": "A unique identifier, <b>aud</b> in a token, for an application (ID Token) or an API (Access Token)."
  },
  "auth0-dashboard": {
    "title": "Auth0 Dashboard",
    "definition": "Auth0’s primary administrator interface in which you can register your application or API, connect to a user store or another identity provider, and configure your Auth0 services.",
    "short": "Auth0's main product to configure your services."
  }, 
  "authentication-server": {
    "title": "Authentication Server",
    "definition": "A server that confirms or denies a user’s identity. An authentication server does not limit the actions or resources available to the user (although it can provide context for this purpose).",
    "short": "A server that confirms or denies a user’s identity."
  },
  "authorization-server": {
    "title": "Authorization Server",
    "definition": "A centralized server that contributes to defining the boundaries of a user’s access. For example, your authorization server can control the data, tasks, and features available to a user. An authorization server does not authenticate users. It’s the role of the authentication server to verify a user’s identity.",
    "short": "A centralized server that contributes to defining the boundaries of a user’s access. For example, your authorization server can control the data, tasks, and features available to a user."
  },
  "authorization-code": {
    "title": "Authorization Code",
    "definition": "A random string generated by the authorization server and returned to the application as part of the authorization response. The authorization code is relatively short-lived and is exchanged for an Access Token at the token endpoint when using the Authorization Code Flow.",
    "short": "A random string generated by the authorization server and returned to the application as part of the authorization response. The authorization code is relatively short-lived and is exchanged for an Access Token at the token endpoint when using the Authorization Code Flow."
  },
  "authorization-flow": {
    "title": "Authorization Flow",
    "definition": "Another name for Authorization Grants outlined in OAuth 2.0. Authorization flows are the workflows a resource (i.e. an application or an AIP) uses to grant requestors access. Based on the type of technology (i.e. if an application can store a Client Secret) and the type of requestor, resource owners can use Authorization Code Flow, Proof of Key Code Exchange (PKCE), Resource Owner Password Credential (ROPG), Implicit, or Client Credential.",
    "short": "Authorization grant (or workflow) specified in the OAuth 2.0 framework."
  },
  "bad-actors": {
    "title": "Bad Actors",
    "definition": "Also known as threat actors. An entity (a person or group) that poses a threat to the business or environment with the intention to cause harm. Harm can constitute physical or cyber damages, from breaking into a data center to hacking into systems with stolen credentials.",
    "short": "An entity (a person or group) that poses a threat to the business or environment with the intention to cause harm."
  },
  "beta": {
    "title": "Beta",
    "definition": "Product release stage during which the referenced feature or behavior is provided to subscribers to give them time to explore and adopt new product capabilities while providing final feedback prior to a General Availability (GA) release. Functionality is code-complete, stable, useful in a variety of scenarios, and believed to meet or almost meet quality expectations for a GA release. Beta releases may be restricted to a select number of subscribers (private) or open to all subscribers (public).",
    "short": "Product release stage during which the referemced feature or behavior is provided to subscribers to give them time to explore and adopt new product capabilities while providing final feedback prior to a General Availability (GA) release. Functionality is code-complete, stable, useful in a variety of scenarios, and believed to meet or almost meet quality expectations for a GA release. Beta releases may be restricted to a select number of subscribers (private) or open to all subscribers (public)."
  },
  "block-unblock": {
    "title": "Block/Unblock Users",
    "definition": "Refers to the features from Auth0's Attack Protection suite: Breached Password Detection, Brute-Force Protection, and Suspicious IP Throttling. Each service assesses login/sign-up trends and blocks IP addresses associated with suspicious activity.",
    "short": "Removing or restoring a requestors access to a resource."
  },
  "bot-detection": {
    "title": "Bot Detection",
    "definition": "A form of attack protection in which Auth0 blocks suspected bot traffic by enabling a CAPTCHA during the login process.",
    "short": "A form of attack protection in which Auth0 blocks suspected bot traffic by enabling a CAPTCHA during the login process."
  },
  "breached-password-protection": {
    "title": "Breached Password Protection",
    "definition": "A form of attack protection in which Auth0 notifies your users if they use a username/password combination that has been compromised in a data leak on a third-party website or app.",
    "short": "A form of attack protection in which Auth0 notifies your users if they use a username/password combination that has been compromised in a data leak on a third-party website or app."
  },
  "breaking-change": {
    "title": "Breaking Change",
    "definition": "Change to the Auth0 platform that, to Auth0's knowledge, will cause failures in the interoperation of the Auth0 platform and customer applications.",
    "short": "Change to the Auth0 platform that, to Auth0's knowledge, will cause failures in the interoperation of the Auth0 platform and customer applications."
  },
  "brute-force-protection": {
    "title": "Brute-force Protection",
    "definition": "A form of attack protection that safeguards against brute-force attacks that occur from a single IP address and target a single user account.",
    "short": "A form of attack protection that safeguards against brute-force attacks that occur from a single IP address and target a single user account."
  },
  "callback": {
    "title": "Callback",
    "definition": "The URL to which Auth0 sends its response after authentication. It is often the same URL to which a user is redirected after authentication.",
    "short": "The URL to which Auth0 sends its response after an API call and sometimes where a user is redirected after authentication."
  },
  "claim": {
    "title": "Claim",
    "definition": "An attribute packaged in a security token which represents a claim that the provider of the token is making about an entity.",
    "short": "An attribute packaged in a security token which represents a claim that the provider of the token is making about an entity."
  },
  "client-id": {
    "title": "Client ID",
    "definition": "Identification value assigned to your application after registration. This value is used in conjunction with other third-party services and can be found in Auth0 Dashboard > Application Settings.",
    "short": "Identification value given to your registered resource from Auth0."
  },
  "client-secret":{
    "title": "Client Secret",
    "definition": "A secret used by a client (application) to authenticate with the Authorization Server; it should be known to only the client and the Authorization Server and must be sufficiently random to not be guessable.",
    "short": "A secret used by a client (application) to authenticate with the Authorization Server; it should be known to only the client and the Authorization Server and must be sufficiently random to be not guessable."
  },
  "confidential-client": {
    "title": "Confidential Client",
    "definition": "According to the OAuth 2.0 protocol, clients (applications) can be classified as either confidential or public depending on whether or not they are able to hold credentials (such as a client ID and secret) securely. Confidential clients can hold credentials in a secure way without exposing them to unauthorized parties and require a trusted backend server to do so. They can use grant types that require them to authenticate by specifying their client ID and secret when calling the token endpoint and can have tokens issued to them that have been signed either symmetrically or asymmetrically.",
    "short": "A client (application) that can hold credentials securely by using a trusted backend server. Examples include a web application with a secure backend and a machine-to-machine (M2M) application."
  },
  "confused-deputy": {
    "title": "Confused Deputy",
    "definition": "The term confused deputy refers to a situation in which an attacker tricks a client or service into performing an action on their behalf.",
    "short": "The term confused deputy refers to a situation in which an attacker tricks a client or service into performing an action on their behalf."
  },
  "connection": {
    "title": "Connection",
    "definition": "The relationship between Auth0 and the sources of users for your applications. Examples include identity providers (such as Google or Active Directory), passwordless authentication methods, or user databases.",
    "short": "The relationship between Auth0 and the sources of users for your applications."
  },
  "custom-domain": {
    "title": "Custom Domain",
    "definition": "A third-party domain with a specialized, or vanity, name. Also known as a CNAME.",
    "short": "A third-party domain with a specialized, or vanity, name."
  },
  "deprecation": {
    "title": "Deprecation",
    "definition": "Product release stage indicating that the referenced feature or behavior is not supported for use by new subscribers, is not actively being enhanced, and is being only minimally maintained. Tenants using the feature or behavior at the time of deprecation will continue to have access.",
    "short": "Product release stage indicating that the referenced feature or behavior is not supported for use by new subscribers, is not actively being enhanced, and is being only minimally maintained. Tenants using the feature or behavior at the time of deprecation will continue to have access."
  },
  "digital-identity": {
    "title": "Digital Identity",
    "definition": "The set of attributes that define a particular user in the context of a function which is delivered by a particular application.",
    "short": "The set of attributes that define a particular user in the context of a function which is delivered by a particular application."
  },
  "digital-signature": {
    "title": "Digital Signature",
    "definition": "A digital signature protects bits in a token from tampering. If the bits are changed or tampered with, the signature will no longer be able to be verified and it will be rejected.",
    "short": "A digital signature protects bits in a token from tampering."
  },
  "directory": {
    "title": "Directory",
    "definition": "A centralized repository of users (the most well-known of which is Active Directory) which centralizes credentials and attributes and makes it unnecessary for each application to have their own local identity setup and pool of users. Allows single sign on to all applications that use the same directory of users.",
    "short": "A centralized repository of users that allows single sign on to all applications that use the same directory."
  },
  "early-access": {
    "title": "Early Access",
    "definition": "A product release stage during which the referemced feature or behavior is provided to a limited number of subscribers or customer development partners (CDPs) to give them the opportunity to test and provide feedback on future functionality. At this stage, functionality may not be complete, but is ready for validation.",
    "short": "A product release stage during which the referemced feature or behavior is provided to a limited number of subscribers or customer development partners (CDPs) to give them the opportunity to test and provide feedback on future functionality. At this stage, functionality may not be complete, but is ready for validation."
  },
  "end-of-life": {
    "title": "End of Life",
    "definition": "A product release stage indicating the referemced feature or behavior is removed from the platform. Continued use of the feature or behavior will likely result in errors. The new behavior will automatically be enabled for Tenants that did not opt in during the migration window.",
    "short": "A product release stage indicating the referemced feature or behavior is removed from the platform. Continued use of the feature or behavior will likely result in errors. The new behavior will automatically be enabled for Tenants that did not opt in during the migration window."
  },
  "end-of-life-date": {
    "title": "End of Life Date",
    "definition": "The date that access to a feature or behavior is removed from the platform. End Of Life Dates can vary between different plan types.",
    "short": "The date that access to a feature or behavior is removed from the platform. End Of Life Dates can vary between different plan types."
  },
  "fapi": {
    "title": "OpenID FAPI",
    "definition": "A suite of security and privacy specifications developed by the OpenID Foundation to allow applications to interact with and use data from financial accounts.",
    "short": "A suite of security and privacy specifications developed by the OpenID Foundation."
  },
  "fine-grained-auth": {
    "title": "Fine Grained Authorization (FGA) ",
    "definition": "Auth0’s SaaS product gives individual users access to specific objects or resources within your application.",
    "short": "A product allowing individual users access to specific objects or resources."
  },
  "flow": {
    "title": "Flow",
    "definition": "Processes that can be extended using Actions. Each Flow is made up of one or more Triggers and represents the logical pipeline through which information moves during a single point in the Auth0 journey.",
    "short": "Processes that can be extended using Actions. Each Flow is made up of one or more Triggers and represents the logical pipeline through which information moves during a single point in the Auth0 journey."  
  },
  "general-availability": {
    "title": "General Availability",
    "definition": "A product release stage during which the referenced feature or behavior is fully functional and available to all subscribers (limited by pricing tier) for production use. If a new release replaces an existing feature, Auth0 provides a period of backward compatibility in accordance with our deprecation policy and informs customers so they have time to adopt the new release.",
    "short": "A product release stage during which the referemced feature or behavior is fully functional and available to all subscribers (limited by pricing tier) for production use. If a new release replaces an existing feature, Auth0 provides a period of backward compatibility in accordance with our deprecation policy and informs customers so they have time to adopt the new release."
  },
  "group": {
    "title": "Group",
    "definition": "A set of one or more users. In the Auth0 Authorization Extension, use groups to grant access to many users at a time.",
    "short": "A set of one or more users. In the Auth0 Authorization Extension, use groups to grant access to many users at a time."
  },
  "id-token": {
    "title": "ID Token",
    "definition": "A credential meant for the client itself, rather than for accessing a resource. It has a fixed format that clients can parse and validate.",
    "short": "A credential meant for the client itself, rather than for accessing a resource."
  },
  "idp": {
    "title": "Identity Provider (IdP)",
    "definition": "A service that stores and manages digital identities. Auth0 supports trusted social, enterprise, and legal identity providers. Auth0 also can function as an identity provider for your applications.",
    "short": "A service that stores and manages digital identities."
  },
  "json-web-token": {
    "title": "JSON Web Token (JWT)",
    "definition": "An open, industry standard <a href='https://tools.ietf.org/html/rfc7519'>RFC 7519</a> method for representing claims securely between two parties. At Auth0, ID Tokens are always returned in JWT format, and Access Tokens are often in JWT format. You may decode well-formed JWTs at <a href='https://jwt.io'>JWT.io</a> to view their claims. See <a href='/docs/jwt'>JSON Web Tokens</a>.",
    "short": "The standard ID Token format and often Access Token format used to represent claims securely between two parties."
  },
  "localization": {
    "title": "Localization",
    "definition": "Ability to render the New Universal Login experience into a supported languages.",
    "short": "Ability to render NUL into a supported language."
  },
  "lock": {
    "title": "Lock",
    "definition": "Auth0's UI widget for authenticating users. It is ready to go as-is and is the default face of the Classic Universal Login experience. Lock allows you to customize minor behavioral and appearance options, but its primary goal is ease of use. See <a href='/docs/lock'>Lock</a>.",
    "short": "Auth0's UI widget for authenticating users."
  },
  "management-api": {
    "title": "Management API",
    "definition": "Auth0's API to manage Auth0 services and perform administrative tasks programatically.",
    "short": "A product to allow customers to perform administrative tasks. "
  },
  "metadata": {
    "title": "Metadata",
    "definition": "Information users can update, such as preferences or profile settings. Metadata is added to ID tokens and can be stored in user profiles.",
    "short": "User information stored in user profiles."
  },
  "migration": {
    "title": "Migration",
    "definition": "A process by which a customer moves away from a particular feature or behavior. Migrations should occur during the Deprecation product release stage.",
    "short": "A process by which a customer moves away from a particular feature or behavior. Migrations should occur during the Deprecation product release stage."
  },
  "multifactor-authentication": {
    "title": "Multi-factor authentication (MFA)",
    "definition": "An authentication process that considers multiple factors. Typically at Auth0, the first factor is the standard username/password exchange, and the second is a code or link via email or SMS, a one-time-password via an app such as Authy or Google Authenticator, or a push notification via a phone app such as Guardian or Duo. Using multiple factors allows your account to remain secure if someone captures one or the other factor--acquires your password or steals your phone, for example. See <a href='/docs/multifactor-authentication'>Multi-factor Authentication</a>.",
    "short": "A user authentication process that uses a factor in addition to username and password such as a code via SMS."
  },
  "nonce": {
    "title": "Nonce",
    "definition": "An arbitrary (often random or pseudo-random) number issued in an authentication protocol that can be used to help detect and mitigate replay attacks using old communications. In other words, the nonce is only issued once, so if an attacker attempts to replay a transaction with a different nonce, its false transaction can be detected more easily. See <a href='/docs/api-auth/tutorials/nonce'>Nonce</a>.",
    "short": "An arbitrary number issued once in an authentication protocol to detect and prevent replay attacks."
  },
  "oath2": {
    "title": "OAuth 2.0",
    "definition": "An authorization framework that defines authorization protocols and workflows. OAuth 2.0 defines roles, authorization grants (or workflows), authorization requests and responses, and token handling. OpenID Connect (OIDC) protocols to verify user identity extends OAuth 2.0.",
    "short": "An authorization framework that defines authorization protocols and workflows."
  },
  "openid": {
    "title": "OpenID",
    "definition": "An open standard for authentication that allows applications to verify users are who they say they are without needing to collect, store, and therefore become liable for a user’s login information. See <a href='/docs/protocols/oidc'>OpenID Connect (OIDC)</a>.",
    "short": "An open standard for authentication that allows applications to verify users' identities without collecting and storing login information." 
  },
  "organizations": {
    "title": "Organizations",
    "definition": "A product for B2B customers to categorize end-users and define specific roles, login experience, and access to resources.",
    "short": "A product to categorize end-users and define specific roles."
},  
  "passwordless": {
    "title": "Passwordless",
    "definition": "A form of authentication where the first factor is not a password. Instead, it could be a one-time password received by email or SMS, a push notification, or a biometric sensor. Passwordless uses one-time passwords, so users are less susceptible to the typical password-based attacks (e.g., dictionary or credential stuffing) than with traditional username/password logins. See <a href='/docs/connections/passwordless'>Passwordless</a>.",
    "short": "A form of authentication that does not rely on a password as the first factor."
  },
  "perimeter": {
    "title": "Perimeter",
    "definition": "A set of boundaries that encompass a directory, all of its users, and all of the applications which use the directory. In some implementations, this perimeter is a physical location; in others, it is a set of networks or devices connected via VPN.",
    "short": "A set of boundaries that encompass a directory, all of its users, and all of the applications which use the directory."
  },
  "product-release-stages": {
    "title": "Product Release Stages",
    "definition": "Phases that describe how Auth0 stages, releases, and retires product functionality. Product features may not progress through all release stages, and the time in each stage will vary depending on the scope and impact of the feature.",
    "short": "Phases that describe how Auth0 stages, releases, and retires product functionality."
  },
  "public-client": {
    "title": "Public Client",
    "definition": "According to the OAuth 2.0 protocol, clients (applications) can be classified as either confidential or public depending on whether or not they are able to hold credentials (such as a client ID and secret) securely. Public clients cannot hold credentials securely, so should only use grant types that do not require the use of their client secret. ID Tokens issued to them must be signed asymmetrically using a private key (RS256) and verified using the public key corresponding to the private key used to sign the token. See <a href='/docs/applications/concepts/app-types-confidential-public'>Application Types - Confidential vs. Public</a>.",
    "short": "A client (application) that cannot hold credentials securely. Examples include a native desktop or mobile application and a JavaScript-based client-side web application (such as a single-page app (SPA))."
  },
  "raw-credentials": {
    "title": "Raw Credentials",
    "definition": "A shared secret or set of information that are agreed upon between the user and the resource that allow the resource to verify the identity of a user.",
    "short": "A shared secret or set of information that are agreed upon between the user and the resource that allow the resource to verify the identity of a user."
  },
  "refresh-token": {
    "title": "Refresh Token",
    "definition": "A special kind of token that can be used to obtain a renewed Access Token. It is useful for renewing expiring Access Tokens without forcing the user to log in again. Using the Refresh Token, you can request a new Access Token at any time until the Refresh Token is blacklisted. See <a href='/docs/tokens/concepts/refresh-tokens'>Refresh Tokens</a>.",
    "short": "A token used to obtain a renewed Access Token without forcing users to log in again."
  },
  "refresh-token-rotation": {
    "title": "Refresh Token Rotation",
    "definition": "A strategy of frequently replacing refresh tokens to minimize vulnerability. With refresh token rotation, every time your application exchanges a refresh token to get a new access token, Auth0 also returns a new refresh token.",
    "short": "A strategy of frequently replacing refresh tokens to minimize vulnerability. With refresh token rotation, every time your application exchanges a refresh token to get a new access token, Auth0 also returns a new refresh token."
  },
  "relying-party": {
    "title": "Relying Party",
    "definition": "An entity (such as a service or application) that depends on a third-party identity provider to authenticate a user.",
    "short": "An entity (such as a service or application) that depends on a third-party identity provider to authenticate a user."
  },
  "resource-owner": {
    "title": "Resource Owner",
    "definition": "An entity (such as a user or application) capable of granting access to a protected resource.",
    "short": "An entity (such as a user or application) capable of granting access to a protected resource."
  },
  "resource-server": {
    "title": "Resource Server",
    "definition": "A server hosting protected resources. Resource servers accept and respond to protected resource requests.",
    "short": "A server hosting protected resources. Resource servers accept and respond to protected resource requests."
  },
  "role": {
    "title": "Role",
    "definition": "An aspect of a user’s identity assigned to the user to indicate the level of access they should have to the system. Roles are essentially collections of permissions. See <a href='/docs/authorization/concepts/rbac'>Role-based Access Control (RBAC)</a>.",
    "short": "An aspect of a user’s identity assigned to the user to give them a certain set of permissions."
  },
  "scope": {
    "title": "Scope",
    "definition": "A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. Often, applications will want to make use of the information that has already been created in an online resource. To do so, the application must ask for authorization to access this information on a user’s behalf. When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs, and the authorization server uses the Scope parameter to respond with the access that was actually granted. See <a href='/docs/scopes'>Scopes</a>.",
    "short": "A mechanism that determines actions applications can perform on a user's behalf with information previously created in an online resource."
  },
  "security-assertion-markup-language": {
    "title": "Security Assertion Markup Language (SAML)",
    "definition": "An XML-based standardized protocol by which two parties can exchange authentication information without the use of a password. See <a href='/docs/protocols/saml'>SAML</a>.",
    "short": "A standardized protocol allowing two parties to exchange authentication information without a password."
  },
  "security-token": {
    "title": "Security Token",
    "definition": "A digitally-signed artifact used to prove that the user was successfully authenticated.",
    "short": "A digitally-signed artifact used to prove that the user was successfully authenticated."
  },
  "session-cookie": {
    "title": "Session Cookie",
    "definition": "An entity emitted by middleware after it establishes that the token it is receiving is signed, valid, and comes from a trusted source (the identity provider). This entity represents the fact that successful authentication occurred with the identity provider. This cookie prevents this process with tokens from needing to be continually repeated, by allowing the user to be considered authenticated as long as the cookie is present.",
    "short": "An entity that, when present, allows the user to be considered authenticated."
  },
  "shadow-accounts": {
    "title": "Shadow Accounts",
    "definition": "A difficult to sustain practice of manually provisioning a user from a local directory separately in a remote directory (essentially creating a copy, or shadow, of the original account) when they need access to remote applications.",
    "short": "A difficult to sustain practice of manually provisioning a user from a local directory separately in a remote directory."
  },
  "signing-algorithm": {
    "title": "Signing Algorithm",
    "definition": "A hashing algorithm used to digitally sign tokens to ensure the token has not been tampered with by bad actors.",
    "short": "An algorithm used to digitally sign tokens to ensure the token has not been tampered with."
  },
  "single-sign-on": {
    "title": "Single Sign-On (SSO)",
    "definition": "A service that, after a user logs into one application, automatically logs that user in to other applications, regardless of the platform, technology, or domain the user is using. The user signs in only one time (hence the name of the feature). Similarly, Single Logout (SLO) occurs when, after a user logs out from one application, they are logged out of each application or service where they were logged in. SSO and SLO are possible through the use of sessions. See <a href='/docs/sso'>Single Sign-On and Single Logout</a>.",
    "short": "A service that, after a user logs into one applicaton, automatically logs that user in to other applications."
  },
  "subscription": {
    "title": "Subscription",
    "definition": "An agreement that defines the features and quotas available for each of your tenants. Auth0 has multiple subscription levels to meet the needs of different developers and organizations.",
    "short": "An agreement that defines the features and quotas available for each of your tenants. Auth0 has multiple subscription levels to meet the needs of different developers and organizations."
  },
  "suspicious-ip-throttling": {
    "title": "Suspicious IP Throttling",
    "definition": "A form of attack protection that protects your tenant against suspicious logins targeting too many accounts from a single IP address.",
    "short": "A form of attack protection that protects your tenant against suspicious logins targeting too many accounts from a single IP address."
  },
  "tenant": {
    "title": "Tenant",
    "definition": "At Auth0, a logically-isolated group of users who share common access with specific privileges to a single software instance. No tenant can access the data of another tenant, even though multiple tenants might be running on the same machine. Tenant, in general, is a term borrowed from software multitenant architecture.",
    "short": "At Auth0, a logically-isolated group of users who share common access with specific privileges to a single software instance. No tenant can access the data of another tenant, even though multiple tenants might be running on the same machine. Tenant, in general, is a term borrowed from software multitenant architecture."
  },
  "token-endpoint": {
    "title": "Token Endpoint",
    "definition": "The endpoint on the Authorization Server that is used to programmatically request tokens.",
    "short": "The endpoint on the Authorization Server that is used to programmatically request tokens."
  },
  "trigger": {
    "title": "Trigger",
    "definition": "An event that automatically invokes an Action when a specific operation, such as a user logging in, occurs at runtime. Some Triggers are executed synchronously, blocking the Flow in which they are involved, and some are executed asynchronously.",
    "short": "An event that automatically invokes an Action when a specific operation, such as a user logging in, occurs at runtime."  
  },
  "trust": {
    "title": "Trust",
    "definition": "A resource trusts an identity provider or authority when that resource is willing to believe what the authority says about its users.",
    "short": "A resource trusts an identity provider or authority when that resource is willing to believe what the authority says about its users."
  },
 "universal-login": {
   "title": "Universal Login",
   "definition": "Auth0’s implementation of the authentication flow, which is the key feature of an Authorization Server. Each time a user needs to prove their identity, your applications redirect to Universal Login, and Auth0 will do what’s needed to guarantee the user’s identity. See <a href='/docs/universal-login'>Auth0 Universal Login</a>.",
   "short": "Your application redirects to Universal Login, hosted on Auth0's Authorization Server, to verify a user's identity."
 },
 "ws-fed": {
  "title": "Web Service Federation (WS-Fed)",
  "definition": "A protocol for managing user identities between systems, domains, and identity providers with established trust using WS-Trust. This protocol is mainly used for Microsoft products and defines policies on how to share federation metadata. ",
  "short": "A protocol for managing user identities across domains."
 }
}
